%% ODE Lab: Creating your own ODE solver in MATLAB
%
% In this lab, you will write your own ODE solver for the Improved Euler 
% method (also known as the Heun method), and compare its results to those 
% of |ode45|.
%
% You will also learn how to write a function in a separate m-file and 
% execute it.
% 
% Opening the m-file lab3.m in the MATLAB editor, step through each
% part using cell mode to see the results.  Compare the output with the
% PDF, which was generated from this m-file.
%
% There are six (6) exercises in this lab that are to be handed in on the
% due date. Write your solutions in the template, including
% appropriate descriptions in each step. Save the .m files and submit them 
% online on Quercus.
%
%% Student Information
%
% Student Name: Edwin Chacko
%
% Student Number: 1009149716  
%

%% Creating new functions using m-files.
%  
% Create a new function in a separate m-file:
%
% Specifics:  Create a text file with the file name f.m
% with the following lines of code (text):
%
%  function y = f(a,b,c) 
%  y = a+b+c;
%
% Now MATLAB can call the new function f (which simply accepts 3 numbers
% and adds them together).  
% To see how this works, type the following in the matlab command window:
% sum = f(1,2,3)

%% Exercise 1
%
% Objective: Write your own ODE solver (using the Heun/Improved Euler
% Method).
%
% Details: This m-file should be a function which accepts as variables 
% (t0,tN,y0,h), where t0 and tN are the start and end points of the 
% interval on which to solve the ODE, y0 is the initial condition of the
% ODE, and h is the stepsize.  You may also want to pass the function into
% the ODE the way |ode45| does (check lab 2).
%
% Note: you will need to use a loop to do this exercise.  
% You will also need to recall the Heun/Improved Euler algorithm learned in lectures.  
%

% Completed

%% Exercise 2
%
% Objective: Compare Heun with |ode45|.
%
% Specifics:  For the following initial-value problems (from lab 2, 
% exercises 1, 4-6), approximate the solutions with your function from
% exercise 1 (Improved Euler Method).
% Plot the graphs of your Improved Euler Approximation with the |ode45| 
% approximation.
%
% (a) |y' = y tan t + sin t, y(0) = -1/2| from |t = 0| to |t = pi|
%
% (b) |y' = 1 / y^2 , y(1) = 1| from |t=1| to |t=10|
%
% (c) |y' =  1 - t y / 2, y(0) = -1| from |t=0| to |t=10|
%
% (d) |y' = y^3 - t^2, y(0) = 1| from |t=0| to |t=1|
%
% Comment on any major differences, or the lack thereof. You do not need
% to reproduce all the code here. Simply make note of any differences for
% each of the four IVPs.

% In subsection (a), the outcomes from Improved Euler Method (IEM) and ode45 
% are almost identical, with an exception around pi/2. The precise solution 
% is articulated as y(t) = -cos(t) / 2, devoid of any asymptotes. 
% Nevertheless, given the presence of tan(t) in the differential
% equation, the IEM faces challenges calculating the slope near pi/2, 
% diverging towards negative or positive infinity. This deviation does not 
% align with the real analytical solution. In contrast, ode45 navigates the 
% discontinuity with better precision, exhibiting a smooth transition near pi/2.

% In subsection (b), the graphical representations generated by both the 
% IEM and ode45 are strikingly similar.
% Initially, no apparent discrepancies between the two solutions are observable.

% In subsection (c), the graphical outputs from IEM and ode45 are predominantly
% indistinct. However, scrutinizing the behavior around t = [1, 2],
% the IEM delineates a smoother trajectory, whereas ode45 manifests some
% linear segments.

% Pertaining to subsection (d), neither the IEM nor ode45 yield plausible 
% solutions. The trajectory from IEM ascends to infinity around 0.8, and 
% ode45's trajectory elevates to infinity around 0.5.

[t1, y1] = improvedEuler(0, pi, -0.5, 0.1, @(t, y) y .* tan(t) + sin(t));
ex1 = plot(t1, y1, 'b');

[t2, y2] = improvedEuler(1,10,1, 0.1,@(t, y) (y.^-2));
ex2 = plot(t2, y2);

[t3, y3] = improvedEuler(0, 10, -1, 0.1,@(t, y) 1 - t.*y/2);
ex3 = plot(t3, y3);

[t4, y4] = improvedEuler(0,1,1, 0.1, @(t, y) y.^3 - t.^2);
ex4 = plot(t4, y4);
clear all;
%% Exercise 3
%
% Objective: Use Euler's method and verify an estimate for the global error.
%
% Details: 
%

% (a) Use Euler's method (you can use
% euler.m from iode) to solve the IVP
%
% |y' = 2 t sqrt( 1 - y^2 )  ,  y(0) = 0|
%
% from |t=0| to |t=0.5|.
%
% (b) Calculate the solution of the IVP and evaluate it at |t=0.5|.
%
% (c) Read the attached derivation of an estimate of the global error for 
%     Euler's method. Type out the resulting bound for En here in
%     a comment. Define each variable.
%
% (d) Compute the error estimate for |t=0.5| and compare with the actual
% error.
%
% (e) Change the time step and compare the new error estimate     with the
% actual error. Comment on how it confirms the order of Euler's method.

% a)
clear all;
f = @(t, y) 2 * t * sqrt(1 - y^2);

t = linspace(0, 0.5);
y = euler(f, 0, t);

plot(t, y, 'x-','DisplayName', 'Euler Solution');
hold on;
t = linspace(0, 0.5, 1000);  
f = @(t) sin(t.^2);
y = f(t); 

plot(t, y,'DisplayName', 'Exact Solution');  
hold on;
xlabel('t');  
ylabel('f(t)');  
title('f(t) = sin(t^2)');  
grid on;  
hold off;
%b)
clear all;
% General solution: y = sin(t^2) + sin(C)
% Particular solution: y(t) = sin(t^2)
t = 0.5;
y = sin(t^2);
fprintf('y(%g) = %g\n', t, y);

%c)

% E_n = ((1+M)*dt/2)*(exp(M*dt)-1)*N
% M: Maximum of f, df/dt, df/dy
% t = [0,0.5] y = [0, 0.25] 
% M = 2 in this case. maximums of f, df/dt, df/dy
% dt: (time) step size is 0.005 
% N: number of steps is 100

%d)
clear all;
f = @(t, y) 2 * t * sqrt(1 - y^2);

dt = 0.01;
M = 2;
N = length(0:dt:0.5) - 1;

yx = @(t) sin(t.^2);
actual = yx(0.5);
t = 0:dt:0.5;

solution = euler(f, 0, t);
euler_v = solution(length(solution));
actual_error =  abs(actual - euler_v);

calculatedError = ((1 + M) * dt * (exp(M * dt * N) - 1)) / 2;

fprintf('dt = %g\n', dt);
fprintf('Computed Error: %g\n', calculatedError);
fprintf('Actual Error: %g\n', actual_error);

%e)
clear all;
f = @(t, y) 2 * t * sqrt(1 - y^2);

dt = 0.001;
M = 2;
N = length(0:dt:0.5) - 1;

yx = @(t) sin(t.^2);
actual = yx(0.5);
t = 0:dt:0.5;

solution = euler(f, 0, t);
euler_v = solution(length(solution));
actual_error =  abs(actual - euler_v);

calculatedError = ((1 + M) * dt * (exp(M * dt * N) - 1)) / 2;

fprintf('dt = %g\n', dt);
fprintf('Computed Error: %g\n', calculatedError);
fprintf('Actual Error: %g\n', actual_error);

% Confirms linearity (first order) of Euler's Method since i decreased it
% by a factor of 10 which led to a reduction in the error by the same
% factor

%% Adaptive Step Size
%
% As mentioned in lab 2, the step size in |ode45| is adapted to a
% specific error tolerance.
%
% The idea of adaptive step size is to change the step size |h| to a
% smaller number whenever the derivative of the solution changes quickly.
% This is done by evaluating f(t,y) and checking how it changes from one
% iteration to the next.

%% Exercise 4
%
% Objective: Create an Adaptive Euler method, with an adaptive step size |h|.
%
% Details: Create an m-file which accepts the variables |(t0,tN,y0,h)|, as 
% in exercise 1, where |h| is an initial step size. You may also want to 
% pass the function into the ODE the way |ode45| does.
%
% Create an implementation of Euler's method by modifying your solution to 
% exercise 1. Change it to include the following:
%
% (a) On each timestep, make two estimates of the value of the solution at
% the end of the timestep: |Y| from one Euler step of size |h| and |Z| 
% from two successive Euler steps of size |h/2|. The difference in these
% two values is an estimate for the error.
%
% (b) Let |tol=1e-8| and |D=Z-Y|. If |abs(D)<tol|, declare the step to be
% successful and set the new solution value to be |Z+D|. This value has
% local error |O(h^3)|. If |abs(D)>=tol|, reject this step and repeat it 
% with a new step size, from (c).
%
% (c) Update the step size as |h = 0.9*h*min(max(tol/abs(D),0.3),2)|.
%
% Comment on what the formula for updating the step size is attempting to
% achieve.

% The formula updates the step size in hopes that the error D will be
% within tolerence on the next run. The 0.9 is the reduction factor along
% with min and max that ensure the reduction is reasonable.

%% Exercise 5
%
% Objective: Compare Euler to your Adaptive Euler method.
%
% Details: Consider the IVP from exercise 3.
%
% (a) Use Euler method to approximate the solution from |t=0| to |t=0.75|
% with |h=0.025|.
%
% (b) Use your Adaptive Euler method to approximate the solution from |t=0| 
% to |t=0.75| with initial |h=0.025|.
%
% (c) Plot both approximations together with the exact solution.

% a)
f = @(t,y) 2 * t * sqrt(1 - y^2);
t0 = 0;
tn = 0.75;
y0 = 0;
h = 0.025;
t = t0:h:tn;

y = euler(f, y0, t);
plot(t, y, 'x-');
hold on;

% b)
[t, y] = adaptiveEuler(t0, tn, y0, h, f);
plot(t, y);
hold on;

% c)
f = @(t) sin(t.^2);
t = linspace(t0, tn);
y = f(t);
plot(t, y,'g');

title('Euler VS Adaptive Euler');
xlabel('t');
ylabel('y');
legend('Euler', 'Adaptive Euler', 'Exact', 'Location', 'Best');
grid on;
%% Exercise 6
%
% Objective: Problems with Numerical Methods.
%
% Details: Consider the IVP from exercise 3 (and 5).
% 
% (a) From the two approximations calculated in exercise 5, which one is
% closer to the actual solution (done in 3.b)? Explain why.
% 
% (b) Plot the exact solution (from exercise 3.b), the Euler's 
% approximation (from exercise 3.a) and the adaptive Euler's approximation 
% (from exercise 5) from |t=0| to |t=1.5|.
%
% (c) Notice how the exact solution and the approximations become very
% different. Why is that? Write your answer as a comment.

% a) The adaptive method is more accureate. Both have the same h but in the
% case of the adaptive method, h can change if the slope expereinces sharp
% changes. This means ths estimating will be in tolerance, and the set
% tolerance was 1e-8. 

% b)
f = @(t,y) 2 * t * sqrt(1 - y^2);
solution = @(t) sin(t.^2);
t0 = 0;
tN = 1.5;
y0 = 0;
h = 0.025;
t = t0:h:tN;


t = linspace(t0, tN);
y = solution(t);

plot(t, y);
hold on;

y = euler(f, y0, t);
plot(t, y, 'g.-');
hold on;
clear t;
[t, y] = adaptiveEuler(t0, tN, y0, h, f);
plot(t, y, 'r-');
title('Euler Vs Adaptive');
xlabel('t');
ylabel('y');
legend('Exact', 'Euler', 'Adaptive Euler', 'Location', 'Best');

% c)

% The exact solution starts to differ significantly from the Adaptive Euler's
% Method (AEM) and ODE45 approximations around t = pi/2 and t = 1. This 
% deviation is attributed to the term sqrt(1 - y^2) in the differential 
% equation. When the approximations result in a y value larger than 1,
% the square root term turns imaginary. Given that MATLAB operates with 
% real numbers only, this leads to irregularities in the graphs and a 
% further divergence from the exact solution, indicating the numerical 
% methods' inadequacy in handling imaginary components during slope calculations.